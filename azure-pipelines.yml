# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  version: ''
  semantic_version: ''
  github_version: ''

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Set version for artifacts'
      env:
        BUILD_ID: $(tag)
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.

          $content = [Xml] (Get-Content .\VentilatorDaemon\VentilatorDaemon.csproj)
          $version = [Version] $content.Project.PropertyGroup.AssemblyVersion

          $semantic_version_string = [System.String]::Format("{0}.{1}.{2}", $version.Major, $version.Minor, $env:BUILD_ID)
          $version_string = [System.String]::Format("{0}.0", $semantic_version_string)
          $github_version_string = [System.String]::Format("v{0}.{1}.{2}", $version.Major, $version.Minor, $env:BUILD_ID)
          
          Write-Host "Create version variable"
          Write-Host "##vso[task.setvariable variable=version]$version_string"
          Write-Host "##vso[task.setvariable variable=semantic_version]$semantic_version_string"
          Write-Host "##vso[task.setvariable variable=github_version]$github_version_string"
    - task: DotNetCoreCLI@2
      displayName: 'Restore nuget packages for windows version'
      inputs:
        command: 'restore'
        projects: './VentilatorDaemon/VentilatorDaemon.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Build windows version'
      inputs:
        command: 'build'
        projects: './VentilatorDaemon/VentilatorDaemon.csproj'
        arguments: '-c Release /p:AssemblyVersion=$(version)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish windows version'
      inputs:
        publishWebProjects: false
        command: 'publish'
        projects: './VentilatorDaemon/VentilatorDaemon.csproj'
        arguments: '-c Release --self-contained true --runtime win-x64 --output $(Build.ArtifactStagingDirectory) /p:AssemblyVersion=$(version)'
        zipAfterPublish: true
    - task: Docker@2
      displayName: Build the docker image
      inputs:
        command: build
        containerRegistry: 'DockerHubConnection'
        repository: 'beademingstoestel/daemon'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        arguments: --build-arg build_version=$(version)
        tags: |
          $(tag)
          latest
    - task: Docker@2
      displayName: push daemon image
      inputs:
        containerRegistry: 'DockerHubConnection'
        repository: 'beademingstoestel/daemon'
        command: push
        tags: |
          $(tag)
          latest
    - task: PublishBuildArtifacts@1
      displayName: Publish artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'daemon'
        publishLocation: 'Container'
    - task: UniversalPackages@0
      inputs:
        command: 'publish'
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        feedsToUsePublish: 'internal'
        vstsFeedPublish: '7bc5a5ea-bb39-4104-bb3e-5a9943794ea2/11b9ff53-9849-4ae8-b460-5a2301ca35b7'
        vstsFeedPackagePublish: 'daemon'
        versionOption: 'custom'
        versionPublish: '$(semantic_version)'
        packagePublishDescription: 'C# daemon for the opensource ventilator project'
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github_tom_bruyneel'
        repositoryName: 'beademingstoestel/csharp_daemon'
        action: create
        target: 'master'
        tagSource: 'userSpecifiedTag'
        tag: '$(github_version_string)'
        title: 'Release version $(semantic_version)'
        releaseNotesSource: 'inline'
        releaseNotesInline: 'Version: $(semantic_version)'
        assets: '$(Build.ArtifactStagingDirectory)/*'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        addChangeLog: true
